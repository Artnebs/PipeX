/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anebbou <anebbou@student42.fr>             +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/07 15:23:54 by anebbou           #+#    #+#             */
/*   Updated: 2025/01/18 14:34:44 by anebbou          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"

/**
 * execute_pipeline - Executes two commands connected via a pipe.
 * @cmd1: First command with its arguments.
 * @cmd2: Second command with its arguments.
 * @envp: Array of environment variables.
 *
 * Creates a pipe to connect the output of the first command to the input
 * of the second command. Handles child processes for execution.
 * This is a simplified version for exactly two commands.
 */
void execute_pipeline(char **cmd1, char **cmd2, char **envp)
{
	int pipe_fd[2];
	pid_t pid1, pid2;

	if (pipe(pipe_fd) < 0)
	{
		perror("Pipe creation failed");
		exit(EXIT_FAILURE);
	}

	pid1 = fork();
	if (pid1 < 0)
	{
		perror("Fork failed");
		exit(EXIT_FAILURE);
	}
	if (pid1 == 0)
	{
		// First child: Executes cmd1
		dup2(pipe_fd[1], STDOUT_FILENO); // Redirect stdout to pipe write-end
		close(pipe_fd[0]);				 // Close unused read-end
		close(pipe_fd[1]);				 // Close write-end after duplication
		execute_command(cmd1, envp);
	}

	pid2 = fork();
	if (pid2 < 0)
	{
		perror("Fork failed");
		exit(EXIT_FAILURE);
	}
	if (pid2 == 0)
	{
		// Second child: Executes cmd2
		dup2(pipe_fd[0], STDIN_FILENO); // Redirect stdin to pipe read-end
		close(pipe_fd[1]);				// Close unused write-end
		close(pipe_fd[0]);				// Close read-end after duplication
		execute_command(cmd2, envp);
	}

	// Parent process: Close all pipe ends and wait for children
	close(pipe_fd[0]);
	close(pipe_fd[1]);
	waitpid(pid1, NULL, 0);
	waitpid(pid2, NULL, 0);
}

/**
 * execute_command - Executes a single command using execve.
 * @cmd: Command with its arguments.
 * @envp: Array of environment variables.
 *
 * Uses execve to replace the current process image with the new program.
 * Exits the program on failure.
 */
void execute_command(char **cmd, char **envp)
{
	char *cmd_path = find_command_path(cmd[0], envp);

	if (!cmd_path)
	{
		ft_printf("Execution failed: Command not found: %s\n", cmd[0]);
		ft_free_split(cmd);
		exit(EXIT_FAILURE);
	}
	if (execve(cmd_path, cmd, envp) < 0)
	{
		perror("Execution failed");
		ft_free_split(cmd);
		free(cmd_path);
		exit(EXIT_FAILURE);
	}
	free(cmd_path);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   here_doc.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anebbou <anebbou@student42.fr>             +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/17 18:12:36 by anebbou           #+#    #+#             */
/*   Updated: 2025/01/18 14:34:51 by anebbou          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"

/**
 * handle_here_doc - Handles the here_doc feature.
 * @limiter: String that marks the end of user input.
 * @cmds: Array of command strings (cmd1, cmd2, etc.).
 * @cmd_count: Number of commands in cmds.
 * @file: Output file to append the result.
 * @envp: Array of environment variables.
 *
 * Reads input from the user until the limiter is encountered, then executes
 * the provided commands. The final command writes to 'file' in append mode.
 */
void handle_here_doc(char *limiter, char **cmds, int cmd_count,
					 char *file, char **envp)
{
	int pipefd[2];
	pid_t pid;
	char *line;

	if (pipe(pipefd) < 0)
	{
		perror("Pipe creation failed");
		exit(EXIT_FAILURE);
	}

	pid = fork();
	if (pid < 0)
	{
		perror("Fork failed");
		exit(EXIT_FAILURE);
	}
	if (pid == 0)
	{
		// Child process: Write user input to pipe until LIMITER
		close(pipefd[0]); // Close read-end
		ft_printf("heredoc> ");
		while ((line = get_next_line(STDIN_FILENO)))
		{
			/*
			** If user typed the limiter + newline => break
			** Example: if limiter="STOP\n", user must type "STOP" + newline
			*/
			if (ft_strncmp(line, limiter, ft_strlen(limiter)) == 0 && line[ft_strlen(limiter)] == '\n')
			{
				free(line);
				break;
			}
			write(pipefd[1], line, ft_strlen(line));
			free(line);
			ft_printf("heredoc> ");
		}
		close(pipefd[1]);
		exit(EXIT_SUCCESS);
	}
	// Parent process: close write-end and feed that into the pipeline
	close(pipefd[1]);

	/*
	** We'll reuse the multiple-pipes function, but we need the first command
	** to read from 'pipefd[0]' as STDIN, and the last command to write to
	** 'file' in APPEND mode. We'll pass here_doc=1 to signify append mode.
	**
	** If cmd_count == 1, that means "here_doc LIMITER singlecmd file" -> just
	** read from pipefd[0] and write to 'file'.
	** If cmd_count == 2 or more, we do multiple pipes logic.
	*/
	if (cmd_count == 1)
	{
		// single command reading from heredoc
		pid = fork();
		if (pid < 0)
		{
			perror("Fork failed");
			exit(EXIT_FAILURE);
		}
		if (pid == 0)
		{
			// child
			dup2(pipefd[0], STDIN_FILENO);
			close(pipefd[0]);
			// open file in append mode
			int fd_out = open(file, O_WRONLY | O_CREAT | O_APPEND, 0644);
			if (fd_out < 0)
			{
				perror("Error opening output file");
				exit(EXIT_FAILURE);
			}
			dup2(fd_out, STDOUT_FILENO);
			close(fd_out);

			char **cmd_args = parse_command(cmds[0]);
			execute_command(cmd_args, envp);
			// never returns on success
		}
		close(pipefd[0]);
		waitpid(pid, NULL, 0);
	}
	else
	{
		// For multiple commands, we pass pipefd[0] as the input
		// We'll temporarily replace STDIN with pipefd[0], then call
		// execute_multiple_pipes with file in append mode for the last cmd
		// Implementation below:

		// Save current stdin
		int saved_stdin = dup(STDIN_FILENO);
		if (saved_stdin < 0)
		{
			perror("dup failed");
			exit(EXIT_FAILURE);
		}

		// Hook pipefd[0] to STDIN
		if (dup2(pipefd[0], STDIN_FILENO) < 0)
		{
			perror("dup2 failed");
			close(pipefd[0]);
			exit(EXIT_FAILURE);
		}
		close(pipefd[0]);

		// Now call the multiple pipes logic
		// The first command will read from STDIN (which is now heredoc pipe).
		// The last command will append to 'file'.
		execute_multiple_pipes(NULL, file, cmds, cmd_count, envp, 1);

		// Restore original stdin (not strictly necessary, but good practice)
		if (dup2(saved_stdin, STDIN_FILENO) < 0)
			perror("dup2 restore failed");
		close(saved_stdin);
	}
	// Wait for the heredoc writer child
	wait(NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anebbou <anebbou@student42.fr>             +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/17 17:58:45 by anebbou           #+#    #+#             */
/*   Updated: 2025/01/18 14:34:33 by anebbou          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"

/**
 * validate_environment - Ensures the environment variables are valid.
 * @envp: Environment variables array.
 *
 * Checks if the `PATH` variable exists in the environment.
 * Exits the program with an error message if the environment is invalid.
 */
void validate_environment(char **envp)
{
	int i = 0;

	if (!envp || !*envp)
	{
		ft_printf("Error: Missing environment variables.\n");
		exit(EXIT_FAILURE);
	}
	while (envp[i])
	{
		if (ft_strncmp(envp[i], "PATH=", 5) == 0)
			return; // PATH variable found
		i++;
	}
	ft_printf("Error: PATH variable is missing in the environment.\n");
	exit(EXIT_FAILURE);
}

/**
 * main - Entry point for the pipex program.
 * @argc: Argument count.
 * @argv: Argument vector.
 * @envp: Environment variables.
 *
 * Handles both the mandatory and bonus parts of the project. Supports:
 * - Two commands
 * - Multiple commands
 * - here_doc (with limiter)
 *
 * Returns:
 *   EXIT_SUCCESS on success, or exits with failure status on error.
 */
int main(int argc, char **argv, char **envp)
{
	// Validate environment variables
	validate_environment(envp);

	if (argc < 5)
	{
		ft_printf("Usage:\n");
		ft_printf("  %s file1 cmd1 cmd2 [cmd3 ...] file2\n", argv[0]);
		ft_printf("Or for here_doc:\n");
		ft_printf("  %s here_doc LIMITER cmd1 [cmd2 ...] file\n", argv[0]);
		return (EXIT_FAILURE);
	}

	/*
	** Bonus: here_doc mode
	** Usage: ./pipex here_doc LIMITER cmd1 cmd2 ... cmdN file
	*/
	if (ft_strncmp(argv[1], "here_doc", ft_strlen("here_doc")) == 0)
	{
		/*
		** Minimum arguments for here_doc:
		** ./pipex here_doc LIMITER cmd file  => at least 5 total
		** (Actually typical usage is 6 total to have 2 commands, e.g.:
		**  ./pipex here_doc LIMITER cmd1 cmd2 file)
		*/
		if (argc < 5)
		{
			ft_printf("Usage for here_doc: %s here_doc LIMITER cmd1 [cmd2 ...] file\n",
					  argv[0]);
			return (EXIT_FAILURE);
		}
		/*
		** handle_here_doc:
		** argv[2] -> LIMITER
		** &argv[3] -> commands
		** cmd_count = argc - 4
		** file = argv[argc - 1]
		*/
		handle_here_doc(argv[2], &argv[3], argc - 4, argv[argc - 1], envp);
	}
	else
	{
		/*
		** Standard or multiple-pipes mode:
		** ./pipex file1 cmd1 cmd2 [cmd3 ... cmdN] file2
		*/
		validate_files(argv[1], argv[argc - 1]);

		if (argc == 5)
		{
			// Exactly two commands:
			setup_redirection(argv[1], argv[argc - 1]);
			char **cmd1 = parse_command(argv[2]);
			char **cmd2 = parse_command(argv[3]);
			execute_pipeline(cmd1, cmd2, envp);
			ft_free_split(cmd1);
			ft_free_split(cmd2);
		}
		else
		{
			// More than two commands:
			execute_multiple_pipes(argv[1], argv[argc - 1],
								   &argv[2], argc - 3, envp, 0);
		}
	}
	return (EXIT_SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   multiple_pipes.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anebbou <anebbou@student42.fr>             +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/17 18:10:20 by anebbou           #+#    #+#             */
/*   Updated: 2025/01/18 14:35:06 by anebbou          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"

/*
** execute_multiple_pipes - Executes multiple commands in a pipeline.
** @file1:  Input file path (optional; can be NULL in here_doc mode).
** @file2:  Output file path (required).
** @cmds:   Array of command strings.
** @cmd_count: Number of commands in cmds.
** @envp:   Environment variables array.
** @here_doc:  If 1 => last command's output should be appended to file2;
**            if 0 => last command's output should truncate file2.
**
** This function sets up dynamic pipes for all commands, hooking:
**   - the first command to either file1 or STDIN (if here_doc was set up),
**   - intermediate commands to read from the previous pipe,
**   - the last command to write to file2 (append or truncate).
*/
void execute_multiple_pipes(char *file1, char *file2,
							char **cmds, int cmd_count,
							char **envp, int here_doc)
{
	int i, status;
	int pipes[cmd_count - 1][2];
	pid_t pids[cmd_count];

	// Create pipes for each "gap" between commands
	for (i = 0; i < cmd_count - 1; i++)
	{
		if (pipe(pipes[i]) < 0)
		{
			perror("Pipe creation failed");
			exit(EXIT_FAILURE);
		}
	}

	for (i = 0; i < cmd_count; i++)
	{
		pids[i] = fork();
		if (pids[i] < 0)
		{
			perror("Fork failed");
			exit(EXIT_FAILURE);
		}
		if (pids[i] == 0)
		{
			// Child process

			/* Redirect stdin */
			if (i == 0)
			{
				// first command
				if (file1 != NULL)
				{
					// Not here_doc mode => read from file1
					int fd_in = open(file1, O_RDONLY);
					if (fd_in < 0)
					{
						perror("Error opening input file");
						exit(EXIT_FAILURE);
					}
					dup2(fd_in, STDIN_FILENO);
					close(fd_in);
				}
				// else if file1 == NULL => already reading from STDIN
				// (could be from the heredoc pipe if set by handle_here_doc)
			}
			else
			{
				// Not the first command => read from previous pipe
				dup2(pipes[i - 1][0], STDIN_FILENO);
			}

			/* Redirect stdout */
			if (i == cmd_count - 1)
			{
				// last command => write to file2
				int fd_out;
				if (here_doc)
					fd_out = open(file2, O_WRONLY | O_CREAT | O_APPEND, 0644);
				else
					fd_out = open(file2, O_WRONLY | O_CREAT | O_TRUNC, 0644);

				if (fd_out < 0)
				{
					perror("Error opening output file");
					exit(EXIT_FAILURE);
				}
				dup2(fd_out, STDOUT_FILENO);
				close(fd_out);
			}
			else
			{
				// not last command => write to next pipe
				dup2(pipes[i][1], STDOUT_FILENO);
			}

			// Close all pipes in child
			for (int j = 0; j < cmd_count - 1; j++)
			{
				close(pipes[j][0]);
				close(pipes[j][1]);
			}

			// Parse and execute the command
			char **cmd_args = parse_command(cmds[i]);
			execute_command(cmd_args, envp);
			// Will never return on success
			ft_free_split(cmd_args);
			exit(EXIT_FAILURE); // safety
		}
	}

	// Parent closes all pipes
	for (i = 0; i < cmd_count - 1; i++)
	{
		close(pipes[i][0]);
		close(pipes[i][1]);
	}
	// Wait for all children
	for (i = 0; i < cmd_count; i++)
		waitpid(pids[i], &status, 0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parsing.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anebbou <anebbou@student42.fr>             +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/07 15:23:41 by anebbou           #+#    #+#             */
/*   Updated: 2025/01/18 14:44:13 by anebbou          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"

/**
 * validate_files - Validates that input and output files can be accessed.
 * @file1: Input file path.
 * @file2: Output file path.
 *
 * Checks if the input file can be opened for reading and the output file
 * can be created or opened for writing. Exits the program on failure.
 */
void validate_files(char *file1, char *file2)
{
	int fd = open(file1, O_RDONLY);
	if (fd < 0)
	{
		perror("Error opening input file");
		exit(EXIT_FAILURE);
	}
	close(fd);

	fd = open(file2, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	if (fd < 0)
	{
		perror("Error opening or creating output file");
		exit(EXIT_FAILURE);
	}
	close(fd);
}

/**
 * parse_command - Splits a command string into an array of arguments.
 * @cmd: Command string (e.g., "ls -l /usr/bin").
 *
 * Returns:
 *   A dynamically allocated array of strings containing the command and
 *   its arguments. Exits the program on failure.
 */
char **parse_command(char *cmd)
{
	char **split_cmd = ft_split(cmd, ' ');
	if (!split_cmd || !split_cmd[0])
	{
		ft_printf("Error: Invalid or empty command: '%s'\n", cmd);
		if (split_cmd)
			ft_free_split(split_cmd);
		exit(EXIT_FAILURE);
	}
	// Debugging: Print parsed command (optional)
	// ft_printf("Parsed Command: %s\n", split_cmd[0]);
	return (split_cmd);
}

/**
 * find_command_path - Finds the full path of a command.
 * @cmd: Command name.
 * @envp: Array of environment variables.
 *
 * Returns:
 *   A dynamically allocated string containing the full path of the command.
 *   Returns NULL if the command is not found.
 */
char *find_command_path(char *cmd, char **envp)
{
	char **paths = NULL;
	char *path_var = NULL;
	// Remove: char *full_path = NULL;
	int i;

	// If cmd contains a slash, user might have given a direct path
	if (strchr(cmd, '/'))
	{
		if (access(cmd, X_OK) == 0)
			return strdup(cmd); // just return a copy if it's executable
		return NULL;
	}

	// Find PATH in envp
	for (i = 0; envp[i]; i++)
	{
		if (ft_strncmp(envp[i], "PATH=", 5) == 0)
		{
			path_var = envp[i] + 5; // skip 'PATH='
			break;
		}
	}
	if (!path_var)
		return NULL;

	// Split PATH into directories
	paths = ft_split(path_var, ':');
	if (!paths)
		return NULL;

	// Check each directory for the command
	i = 0;
	while (paths[i])
	{
		char *tmp = malloc(strlen(paths[i]) + strlen(cmd) + 2);
		if (!tmp)
		{
			ft_free_split(paths);
			return NULL;
		}
		// build full_path = "paths[i]/cmd"
		sprintf(tmp, "%s/%s", paths[i], cmd);

		if (access(tmp, X_OK) == 0)
		{
			ft_free_split(paths);
			return tmp; // Return this path if found
		}
		free(tmp);
		i++;
	}
	ft_free_split(paths);
	return NULL; // Not found
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   redirection.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anebbou <anebbou@student42.fr>             +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/17 17:03:55 by anebbou           #+#    #+#             */
/*   Updated: 2025/01/18 14:35:33 by anebbou          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"

/**
 * setup_redirection - Sets up file redirection for input and output.
 * @file1: Input file to read from.
 * @file2: Output file to write to (trunc).
 *
 * Opens the input and output files and redirects the standard input
 * and output to these files using dup2. Exits the program on failure.
 * This is used only in the simple 2-command scenario.
 */
void setup_redirection(char *file1, char *file2)
{
	int fd_in = open(file1, O_RDONLY);
	if (fd_in < 0)
	{
		perror("Error opening input file");
		exit(EXIT_FAILURE);
	}

	if (dup2(fd_in, STDIN_FILENO) < 0)
	{
		perror("Error redirecting input");
		close(fd_in);
		exit(EXIT_FAILURE);
	}
	close(fd_in);

	int fd_out = open(file2, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	if (fd_out < 0)
	{
		perror("Error opening output file");
		exit(EXIT_FAILURE);
	}

	if (dup2(fd_out, STDOUT_FILENO) < 0)
	{
		perror("Error redirecting output");
		close(fd_out);
		exit(EXIT_FAILURE);
	}
	close(fd_out);
}
